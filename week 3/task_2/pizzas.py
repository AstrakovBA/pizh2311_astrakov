class Пицца:
    """Класс, представляющий пиццу."""

    def __init__(self, название: str, тесто: str, соус: str, начинка: list[str], цена: float) -> None:
        """
        Инициализация пиццы.

        :param название: Название пиццы.
        :param тесто: Тип теста.
        :param соус: Тип соуса.
        :param начинка: Список начинок.
        :param цена: Цена пиццы.
        """
        self._название: str = название
        self._тесто: str = тесто
        self._соус: str = соус
        self._начинка: list[str] = начинка
        self._цена: float = цена

    def __str__(self) -> str:
        """Возвращает строковое представление пиццы.

        :return: Строковое представление пиццы.
        """
        return f"{self._название} ({self._тесто}, {self._соус}, Начинка: {', '.join(self._начинка)}) - {self._цена} руб."

    def подготовить(self) -> None:
        """Подготавливает пиццу."""
        print(f"Подготовка пиццы {self._название}.")

    def испечь(self) -> None:
        """Выпекает пиццу."""
        print(f"Выпекание пиццы {self._название}.")

    def порезать(self) -> None:
        """Режет пиццу."""
        print(f"Резка пиццы {self._название}.")

    def упаковать(self) -> None:
        """Упаковывает пиццу."""
        print(f"Упаковка пиццы {self._название}.")

    @property
    def название(self) -> str:
        """Геттер для получения названия пиццы.

        :return: Название пиццы.
        """
        return self._название

    @property
    def тесто(self) -> str:
        """Геттер для получения типа теста.

        :return: Тип теста.
        """
        return self._тесто

    @property
    def соус(self) -> str:
        """Геттер для получения типа соуса.

        :return: Тип соуса.
        """
        return self._соус

    @property
    def начинка(self) -> list[str]:
        """Геттер для получения списка начинок.

        :return: Список начинок.
        """
        return self._начинка

    @property
    def цена(self) -> float:
        """Геттер для получения цены пиццы.

        :return: Цена пиццы.
        """
        return self._цена

    @цена.setter
    def цена(self, новая_цена: float) -> None:
        """Сеттер для установки новой цены пиццы.

        :param новая_цена: Новая цена пиццы.
        :raises ValueError: Если цена отрицательная.
        """
        if новая_цена < 0:
            raise ValueError("Цена не может быть отрицательной.")
        self._цена = новая_цена


class ПиццаПепперони(Пицца):
    """Класс, представляющий пиццу Пепперони."""

    def __init__(self) -> None:
        """Инициализация пиццы Пепперони."""
        super().__init__("Пепперони", "Тонкое", "Томатный", ["Пепперони", "Сыр"], 500)


class ПиццаБарбекю(Пицца):
    """Класс, представляющий пиццу Барбекю."""

    def __init__(self) -> None:
        """Инициализация пиццы Барбекю."""
        super().__init__("Барбекю", "Толстое", "Барбекю", ["Курица", "Сыр", "Лук"], 600)


class ПиццаДарыМоря(Пицца):
    """Класс, представляющий пиццу Дары моря."""

    def __init__(self) -> None:
        """Инициализация пиццы Дары моря."""
        super().__init__("Дары моря", "Тонкое", "Сливочный", ["Креветки", "Кальмары", "Сыр"], 700)
        
